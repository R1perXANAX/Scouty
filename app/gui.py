
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from collections import OrderedDict
import os
from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, filedialog


import sys
from pathlib import Path

# Get the directory of your script
script_directory = Path(__file__).parent

# Get the parent directory (project_root)
project_root = script_directory.parent

# Add project_root to sys.path
sys.path.append(str(project_root))

from codeparser import parser
from utils import ranking
from utils import dataset

link_vector_pairs = []
normalized_documents = {}

def browse_file():
    filename = filedialog.askopenfilename(filetypes=[("Python files", "*.py")])
    if filename:
        with open(filename, "r") as file:
            file_contents = file.read()
            entry_1.delete("1.0", "end")  # Clear the existing text
            entry_1.insert("1.0", file_contents)  # Insert new text
            
def search_doc():
    query = entry_1.get("1.0", "end").strip()  # Get the query from entry_1
    scores_dict = {}

    q_vectorized = parser.vectorize(query)
    normq = ranking.norm(ranking.rough_query_to_non_normalized_tfidf(q_vectorized))
    
    
    for link, normalized_document in normalized_documents.items():
        score = ranking.scoring(q_vectorized, normq, normalized_document, link)
        scores_dict[link] = score

    sorted_scores = OrderedDict(sorted(scores_dict.items(), key=lambda x: x[1], reverse=True))

    # Clear previous results
    entry_2.delete("1.0", "end")
    entry_3.delete("1.0", "end")

    # Insert new results, ensuring alignment
    for i, (link, score) in enumerate(list(sorted_scores.items())[:10], start=1):
        entry_2.insert("end", f"{i}. {link}\n")
        entry_3.insert("end", f"{i}. {score:.2f}\n")


OUTPUT_PATH = Path(__file__).parent

# Get the current working directory
current_path = Path(os.getcwd())

# Combine the current path with the relative path to assets\frame0
ASSETS_PATH = current_path / 'app' / 'assets' / 'frame0'

def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


window = Tk()

window.geometry("900x650")
window.configure(bg = "#1E1E1E")


canvas = Canvas(
    window,
    bg = "#1E1E1E",
    height = 650,
    width = 900,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
canvas.create_text(
    11.0,
    596.0,
    anchor="nw",
    text="Scouty Engine V1",
    fill="#FFFFFF",
    font=("Inter Regular", 14 * -1)
)

button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=search_doc,
    relief="flat"
)
button_1.place(
    x=16.0,
    y=332.0,
    width=93.0,
    height=28.0
)

canvas.create_text(
    57.0,
    68.0,
    anchor="nw",
    text="Code Pattern",
    fill="#FFFFFF",
    font=("Inter SemiBold", 20 * -1)
)

entry_image_1 = PhotoImage(
    file=relative_to_assets("entry_1.png"))
entry_bg_1 = canvas.create_image(
    201.5,
    210.0,
    image=entry_image_1
)
entry_1 = Text(
    window,
    bd=0,
    bg="#454343",
    fg="#FFFFFF",  # Set text color to white
    font=("Helvetica", 10),  # Change font and size
    highlightthickness=0
)
entry_1.place(
    x=26.0,
    y=102.0,
    width=351.0,
    height=214.0
)

image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    145.0,
    605.0,
    image=image_image_1
)

image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    145.0,
    605.0,
    image=image_image_2
)

entry_image_2 = PhotoImage(
    file=relative_to_assets("entry_2.png"))
entry_bg_2 = canvas.create_image(
    577.0,
    370.0,
    image=entry_image_2
)
entry_2 = Text(
    window,
    bd=0,
    bg="#464343",
    fg="#FFFFFF",  # Set text color to white
    font=("Helvetica", 10),  # Change font and size
    highlightthickness=0
)
entry_2.place(
    x=440.0,
    y=118.0,
    width=274.0,
    height=502.0
)

canvas.create_text(
    530.0,
    103.0,
    anchor="nw",
    text="Document Links",
    fill="#FFFFFF",
    font=("Inter Medium", 12 * -1)
)

entry_image_3 = PhotoImage(
    file=relative_to_assets("entry_3.png"))
entry_bg_3 = canvas.create_image(
    809.0,
    370.0,
    image=entry_image_3
)
entry_3 = Text(
    window,
    bd=0,
    bg="#464343",
    fg="#FFFFFF",  # Set text color to white
    font=("Helvetica", 10),  # Change font and size
    highlightthickness=0
)
entry_3.place(
    x=769.0,
    y=118.0,
    width=80.0,
    height=502.0
)

canvas.create_text(
    771.0,
    103.0,
    anchor="nw",
    text="Acc. Rateo %",
    fill="#FFFFFF",
    font=("Inter SemiBold", 12 * -1)
)

canvas.create_text(
    11.0,
    628.0,
    anchor="nw",
    text="Developed by: Andrea Romaniello, Luigi Ferrara, Carlotta Bellomo",
    fill="#FFFFFF",
    font=("Inter Thin", 12 * -1)
)

canvas.create_text(
    482.0,
    67.0,
    anchor="nw",
    text="Output",
    fill="#FFFFFF",
    font=("Inter SemiBold", 20 * -1)
)

canvas.create_rectangle(
    0.0,
    0.0,
    900.0,
    53.0,
    fill="#4F2B9B",
    outline="")

canvas.create_text(
    293.0,
    12.0,
    anchor="nw",
    text="GitHub Code Pattern Finder",
    fill="#FFFFFF",
    font=("Inter Light", 24 * -1)
)

canvas.create_rectangle(
    406.0,
    51.0,
    408.00000002843836,
    649.9999990451033,
    fill="#4F2B9B",
    outline="")

image_image_3 = PhotoImage(
    file=relative_to_assets("image_3.png"))
image_3 = canvas.create_image(
    32.0,
    80.0,
    image=image_image_3
)

image_image_4 = PhotoImage(
    file=relative_to_assets("image_4.png"))
image_4 = canvas.create_image(
    452.0,
    80.0,
    image=image_image_4
)

button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
button_2 = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    command= browse_file,
    relief="flat"
)
button_2.place(
    x=295.0,
    y=68.0,
    width=90.0,
    height=27.0
)

dataset.download_files("your github token" ,5)
print("Initing Dataset...")
link_vector_pairs = dataset.init()

for pair in link_vector_pairs:
        normalized_documents[pair[0]] = ranking.norm(ranking.transform_to_non_normalized_tfidf(pair[0]))


window.resizable(False, False)
window.mainloop()
